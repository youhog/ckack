-- --- 宿舍檢查系統 - 終極完整 SQL 腳本 (v11 - 最終完整版) ---

-- 此腳本包含：
-- 1. 完整資料表結構 (包含 RBAC 基礎表)
-- 2. 完整外鍵 (Foreign Key) 關聯
-- 3. 自動化函數 (Functions) 與觸發器 (Triggers)
-- 4. 儲存體 (Storage) 設定
-- 5. 完整 RLS (資料列層級安全性) 策略
-- 6. 範例資料 (包含所有 RBAC 基礎數據)
--
-- ----------------------------------------------------------------

-- --- 第 0 部分：預先刪除可能衝突的函數 (使用 CASCADE) ---
DROP FUNCTION IF EXISTS public.get_my_role() CASCADE; 
DROP FUNCTION IF EXISTS public.update_user_role(uuid, text) CASCADE;
DROP FUNCTION IF EXISTS public.handle_new_user() CASCADE;
DROP FUNCTION IF EXISTS public.setup_permissions() CASCADE; 

-- --- 第 1 部分：建立資料表 (安全模式) ---
--
-- ----------------------------------------------------------------

-- RBAC 基礎結構 (為未來權限管理打下基礎)
CREATE TABLE IF NOT EXISTS public.roles (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL UNIQUE,
    description text NULL,
    CONSTRAINT roles_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE public.roles IS 'RBAC: 儲存系統中所有可能的角色，例如 admin, inspector';

CREATE TABLE IF NOT EXISTS public.permissions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL UNIQUE,
    description text NULL,
    CONSTRAINT permissions_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE public.permissions IS 'RBAC: 儲存系統中所有可用的操作權限';

CREATE TABLE IF NOT EXISTS public.role_permissions (
    role_id uuid NOT NULL,
    permission_id uuid NOT NULL,
    CONSTRAINT role_permissions_pkey PRIMARY KEY (role_id, permission_id)
);
COMMENT ON TABLE public.role_permissions IS 'RBAC: 角色與權限的關聯表';
-- 結束 RBAC 基礎結構


-- 1. 宿舍區域
CREATE TABLE IF NOT EXISTS public.dorm_zones (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    description text,
    CONSTRAINT dorm_zones_pkey PRIMARY KEY (id),
    CONSTRAINT dorm_zones_name_key UNIQUE (name)
);
COMMENT ON TABLE public.dorm_zones IS '宿舍區域 (例如: F 區, A 區)';

-- 2. 房間
CREATE TABLE IF NOT EXISTS public.rooms (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    zone_id uuid NOT NULL,
    room_number text NOT NULL,
    CONSTRAINT rooms_pkey PRIMARY KEY (id),
    CONSTRAINT rooms_zone_id_room_number_key UNIQUE (zone_id, room_number)
);
COMMENT ON TABLE public.rooms IS '宿舍房間號碼，隸屬於某個區域';

-- 3. 檢查類型
CREATE TABLE IF NOT EXISTS public.check_types (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    description text,
    CONSTRAINT check_types_pkey PRIMARY KEY (id),
    CONSTRAINT check_types_name_key UNIQUE (name)
);
COMMENT ON TABLE public.check_types IS '檢查的類型 (例如: 寒假檢查, 學期初檢查)';

-- 4. 檢查項目分類
CREATE TABLE IF NOT EXISTS public.checklist_categories (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    icon text DEFAULT '📋'::text,
    display_order integer DEFAULT 0,
    CONSTRAINT checklist_categories_pkey PRIMARY KEY (id),
    CONSTRAINT checklist_categories_name_key UNIQUE (name)
);
COMMENT ON TABLE public.checklist_categories IS '檢查項目的分類 (例如: 寢具區域, 衛浴區域)';

-- 5. 檢查項目
CREATE TABLE IF NOT EXISTS public.checklist_items (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    category_id uuid NOT NULL,
    name text NOT NULL,
    display_order integer DEFAULT 0,
    CONSTRAINT checklist_items_pkey PRIMARY KEY (id),
    CONSTRAINT checklist_items_category_id_name_key UNIQUE (category_id, name)
);
COMMENT ON TABLE public.checklist_items IS '隸屬於某個分類的具體檢查項目 (例如: 床架, 衣櫃)';

-- 6. 使用者公開資料 (profiles)
CREATE TABLE IF NOT EXISTS public.profiles (
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    email text,
    CONSTRAINT profiles_pkey PRIMARY KEY (id),
    CONSTRAINT profiles_email_key UNIQUE (email)
);
COMMENT ON TABLE public.profiles IS '儲存使用者的公開資料，與 auth.users 連動';

-- 7. 使用者角色 (user_roles) - 僅儲存用戶與角色的 TEXT 關聯
CREATE TABLE IF NOT EXISTS public.user_roles (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_id uuid NOT NULL,
    role text NOT NULL,
    CONSTRAINT user_roles_pkey PRIMARY KEY (id),
    CONSTRAINT user_roles_user_id_key UNIQUE (user_id)
);
COMMENT ON TABLE public.user_roles IS '儲存使用者的角色 (admin 或 inspector)';

-- 8. 檢查報告
CREATE TABLE IF NOT EXISTS public.reports (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_id uuid,
    zone_id uuid,
    room_id uuid,
    check_type_id uuid,
    inspector_name text,
    additional_notes text,
    good_count integer DEFAULT 0,
    damaged_count integer DEFAULT 0,
    missing_count integer DEFAULT 0,
    check_data jsonb,
    notes_data jsonb,
    photo_data jsonb,
    report_content_html text,
    CONSTRAINT reports_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE public.reports IS '儲存所有提交的檢查報告';

-- 9. 鑰匙歸還記錄
CREATE TABLE IF NOT EXISTS public.key_returns (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_id uuid, -- 紀錄處理歸還的人
    zone_id uuid NOT NULL,
    room_id uuid NOT NULL,
    student_id text, -- 學生學號/ID
    bed_number text, -- 床位號碼 (例如: '1', 'A')
    return_notes text,
    is_returned boolean DEFAULT true NOT NULL,
    CONSTRAINT key_returns_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE public.key_returns IS '儲存房間鑰匙歸還紀錄，並與特定床位/學生連結。';

-- 10. 學生床位分配 (NEW TABLE)
CREATE TABLE IF NOT EXISTS public.student_allocations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    student_id text NOT NULL, -- 學號 (唯一識別碼)
    zone_id uuid NOT NULL,
    room_id uuid NOT NULL,
    bed_number text NOT NULL, -- 實際床位號 (1, 2, 3, 4)
    CONSTRAINT student_allocations_pkey PRIMARY KEY (id),
    CONSTRAINT student_allocations_student_id_key UNIQUE (student_id),
    CONSTRAINT student_allocations_room_bed_key UNIQUE (room_id, bed_number)
);
COMMENT ON TABLE public.student_allocations IS '學生床位分配表，用於學號查詢。';


-- --- 第 2 部分：建立外鍵 (Foreign Key) 關聯 (安全模式) ---
--
-- ----------------------------------------------------------------

-- RBAC 關聯
ALTER TABLE public.role_permissions DROP CONSTRAINT IF EXISTS role_permissions_role_id_fkey;
ALTER TABLE public.role_permissions ADD CONSTRAINT role_permissions_role_id_fkey FOREIGN KEY (role_id) REFERENCES public.roles (id) ON DELETE CASCADE;
ALTER TABLE public.role_permissions DROP CONSTRAINT IF EXISTS role_permissions_permission_id_fkey;
ALTER TABLE public.role_permissions ADD CONSTRAINT role_permissions_permission_id_fkey FOREIGN KEY (permission_id) REFERENCES public.permissions (id) ON DELETE CASCADE;

-- 【核心修復點】: user_roles.role 連結到 roles.name
ALTER TABLE public.user_roles DROP CONSTRAINT IF EXISTS user_roles_role_fkey;
ALTER TABLE public.user_roles
ADD CONSTRAINT user_roles_role_fkey
FOREIGN KEY (role)
REFERENCES public.roles (name)
ON DELETE RESTRICT;

-- 1. `profiles` -> `auth.users`
ALTER TABLE public.profiles DROP CONSTRAINT IF EXISTS profiles_id_fkey;
ALTER TABLE public.profiles ADD CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users (id) ON DELETE CASCADE;

-- 2. `user_roles` -> `auth.users`
ALTER TABLE public.user_roles DROP CONSTRAINT IF EXISTS user_roles_user_id_fkey;
ALTER TABLE public.user_roles ADD CONSTRAINT user_roles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id) ON DELETE CASCADE;

-- 3. `rooms` -> `dorm_zones`
ALTER TABLE public.rooms DROP CONSTRAINT IF EXISTS rooms_zone_id_fkey;
ALTER TABLE public.rooms ADD CONSTRAINT rooms_zone_id_fkey FOREIGN KEY (zone_id) REFERENCES public.dorm_zones (id) ON DELETE CASCADE;

-- 4. `checklist_items` -> `checklist_categories`
ALTER TABLE public.checklist_items DROP CONSTRAINT IF EXISTS checklist_items_category_id_fkey;
ALTER TABLE public.checklist_items ADD CONSTRAINT checklist_items_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.checklist_categories (id) ON DELETE CASCADE;

-- 5. `reports` -> `profiles`
ALTER TABLE public.reports DROP CONSTRAINT IF EXISTS reports_user_id_fkey;
ALTER TABLE public.reports ADD CONSTRAINT reports_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles (id) ON DELETE SET NULL;

-- 6. `reports` -> `dorm_zones`
ALTER TABLE public.reports DROP CONSTRAINT IF EXISTS reports_zone_id_fkey;
ALTER TABLE public.reports ADD CONSTRAINT reports_zone_id_fkey FOREIGN KEY (zone_id) REFERENCES public.dorm_zones (id) ON DELETE SET NULL;

-- 7. `reports` -> `rooms`
ALTER TABLE public.reports DROP CONSTRAINT IF EXISTS reports_room_id_fkey;
ALTER TABLE public.reports ADD CONSTRAINT reports_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.rooms (id) ON DELETE SET NULL;

-- 8. `reports` -> `check_types`
ALTER TABLE public.reports DROP CONSTRAINT IF EXISTS reports_check_type_id_fkey;
ALTER TABLE public.reports ADD CONSTRAINT reports_check_type_id_fkey FOREIGN KEY (check_type_id) REFERENCES public.check_types (id) ON DELETE SET NULL;

-- 9. `key_returns` -> `profiles`
ALTER TABLE public.key_returns DROP CONSTRAINT IF EXISTS key_returns_user_id_fkey;
ALTER TABLE public.key_returns ADD CONSTRAINT key_returns_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles (id) ON DELETE SET NULL;

-- 12. `student_allocations` -> `rooms`
ALTER TABLE public.student_allocations DROP CONSTRAINT IF EXISTS student_allocations_room_id_fkey;
ALTER TABLE public.student_allocations ADD CONSTRAINT student_allocations_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.rooms (id) ON DELETE CASCADE;

-- 13. `student_allocations` -> `dorm_zones`
ALTER TABLE public.student_allocations DROP CONSTRAINT IF EXISTS student_allocations_zone_id_fkey;
ALTER TABLE public.student_allocations ADD CONSTRAINT student_allocations_zone_id_fkey FOREIGN KEY (zone_id) REFERENCES public.dorm_zones (id) ON DELETE CASCADE;


-- --- 第 3 部分：資料庫函數 (RPC) 與觸發器 (Triggers) ---
--
-- ----------------------------------------------------------------

-- 1. 函數：獲取目前使用者的角色
CREATE OR REPLACE FUNCTION public.get_my_role()
RETURNS text
LANGUAGE sql
SECURITY DEFINER
SET search_path = public
AS $$
    SELECT role
    FROM public.user_roles
    WHERE user_id = auth.uid();
$$;

-- 2. 函數：處理新使用者註冊 (為 profiles 和 user_roles 設定紀錄)
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
    -- 1. 在 profiles 建立紀錄
    INSERT INTO public.profiles (id, email)
    VALUES (NEW.id, NEW.email)
    ON CONFLICT (id) DO NOTHING;

    -- 2. 在 user_roles 建立紀錄，預設為 'inspector'
    INSERT INTO public.user_roles (user_id, role)
    VALUES (NEW.id, 'inspector')
    ON CONFLICT (user_id) DO NOTHING;

    RETURN NEW;
END;
$$;

-- 3. 觸發器：當 auth.users 有新使用者時，執行 handle_new_user
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW
EXECUTE FUNCTION public.handle_new_user();


-- 4. 函數：更新使用者角色 (for ManageUsers.vue)
CREATE OR REPLACE FUNCTION public.update_user_role(target_user_id uuid, new_role text)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
    -- 檢查執行者是否為 'admin'
    IF public.get_my_role() != 'admin' THEN
        RAISE EXCEPTION '權限不足：只有 admin 可以更改使用者角色';
    END IF;

    -- 檢查是否試圖更改自己的角色
    IF target_user_id = auth.uid() THEN
        RAISE EXCEPTION '無法更改自己的角色';
    END IF;

    -- 更新或插入角色
    INSERT INTO public.user_roles (user_id, role)
    VALUES (target_user_id, new_role)
    ON CONFLICT (user_id)
    DO UPDATE SET role = new_role;
END;
$$;


-- 5. 函數：創建所有 RBAC 權限 (一次性運行)
CREATE OR REPLACE FUNCTION public.setup_permissions()
RETURNS void
LANGUAGE plpgsql
AS $$
DECLARE
    role_admin uuid;
    role_inspector uuid;
    role_superadmin uuid;
    role_sdc uuid;
    role_sdsc uuid;
BEGIN
    -- 創建所有角色 (如果不存在)
    INSERT INTO public.roles (name, description) VALUES 
    ('admin', '擁有所有管理權限'), 
    ('inspector', '僅進行檢查與報告'),
    ('superadmin', '超級管理員 (保留給特殊用戶，擁有所有權限)'),
    ('sdc', '宿委會 (中等管理權限)'),
    ('sdsc', '宿服 (僅供查看權限)')
    ON CONFLICT (name) DO NOTHING;
    
    SELECT id INTO role_admin FROM public.roles WHERE name = 'admin';
    SELECT id INTO role_inspector FROM public.roles WHERE name = 'inspector';
    SELECT id INTO role_superadmin FROM public.roles WHERE name = 'superadmin';
    SELECT id INTO role_sdc FROM public.roles WHERE name = 'sdc';
    SELECT id INTO role_sdsc FROM public.roles WHERE name = 'sdsc';
    
    -- 創建所有權限 (用於 ManagePermissions.vue)
    INSERT INTO public.permissions (name, description) VALUES
    ('read_all_reports', '讀取所有檢查報告'),
    ('manage_zones', '管理宿舍區域'),
    ('manage_rooms', '管理宿舍房間'),
    ('manage_types', '管理檢查類型'),
    ('manage_checklist', '管理檢查項目'),
    ('manage_allocations', '匯入學生床位分配資料'),
    ('manage_users', '管理所有使用者帳號與角色'),
    ('manage_permissions', '管理所有角色權限分配')
    ON CONFLICT (name) DO NOTHING;
    
    -- 刪除所有舊的權限指派
    DELETE FROM public.role_permissions WHERE role_id IN (role_admin, role_inspector, role_superadmin, role_sdc, role_sdsc);

    -- 分配權限給 superadmin (所有權限)
    INSERT INTO public.role_permissions (role_id, permission_id)
    SELECT role_superadmin, id FROM public.permissions
    ON CONFLICT (role_id, permission_id) DO NOTHING;

    -- 分配權限給 admin (所有權限)
    INSERT INTO public.role_permissions (role_id, permission_id)
    SELECT role_admin, id FROM public.permissions
    ON CONFLICT (role_id, permission_id) DO NOTHING;

    -- 分配權限給 inspector (範例：只讀取報告)
    INSERT INTO public.role_permissions (role_id, permission_id)
    SELECT role_inspector, id FROM public.permissions WHERE name IN ('read_all_reports')
    ON CONFLICT (role_id, permission_id) DO NOTHING;
    
    -- 分配權限給 SDC (中等管理權限 - 示範)
    INSERT INTO public.role_permissions (role_id, permission_id)
    SELECT role_sdc, id FROM public.permissions WHERE name IN ('read_all_reports', 'manage_zones', 'manage_rooms', 'manage_checklist', 'manage_allocations')
    ON CONFLICT (role_id, permission_id) DO NOTHING;

    -- 分配權限給 SDSC (最低查看權限 - 示範)
    INSERT INTO public.role_permissions (role_id, permission_id)
    SELECT role_sdsc, id FROM public.permissions WHERE name IN ('read_all_reports')
    ON CONFLICT (role_id, permission_id) DO NOTHING;

END;
$$;


-- --- 第 4 部分：儲存體 (Storage) ---
--
-- ----------------------------------------------------------------

INSERT INTO storage.buckets (id, name, public)
VALUES ('photos', 'photos', true)
ON CONFLICT (id) DO NOTHING;

DROP POLICY IF EXISTS "Allow authenticated users to upload photos" ON storage.objects;
CREATE POLICY "Allow authenticated users to upload photos"
ON storage.objects FOR INSERT TO authenticated
WITH CHECK ( bucket_id = 'photos' );

DROP POLICY IF EXISTS "Allow public read access to photos" ON storage.objects;
CREATE POLICY "Allow public read access to photos"
ON storage.objects FOR SELECT
USING ( bucket_id = 'photos' );


-- --- 第 5 部分：資料列層級安全性 (RLS) 策略 ---
--
-- ----------------------------------------------------------------

-- 5a. dorm_zones
ALTER TABLE public.dorm_zones ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow authenticated users to read zones" ON public.dorm_zones;
DROP POLICY IF EXISTS "Allow admin to manage zones" ON public.dorm_zones;
CREATE POLICY "Allow authenticated users to read zones" ON public.dorm_zones FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin to manage zones" ON public.dorm_zones FOR ALL TO authenticated USING (public.get_my_role() = 'admin') WITH CHECK (public.get_my_role() = 'admin');

-- 5b. rooms
ALTER TABLE public.rooms ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow authenticated users to read rooms" ON public.rooms;
DROP POLICY IF EXISTS "Allow admin to manage rooms" ON public.rooms;
CREATE POLICY "Allow authenticated users to read rooms" ON public.rooms FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin to manage rooms" ON public.rooms FOR ALL TO authenticated USING (public.get_my_role() = 'admin') WITH CHECK (public.get_my_role() = 'admin');

-- 5c. check_types
ALTER TABLE public.check_types ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow authenticated users to read check_types" ON public.check_types;
DROP POLICY IF EXISTS "Allow admin to manage check_types" ON public.check_types;
CREATE POLICY "Allow authenticated users to read check_types" ON public.check_types FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin to manage check_types" ON public.check_types FOR ALL TO authenticated USING (public.get_my_role() = 'admin') WITH CHECK (public.get_my_role() = 'admin');

-- 5d. checklist_categories
ALTER TABLE public.checklist_categories ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow authenticated users to read categories" ON public.checklist_categories;
DROP POLICY IF EXISTS "Allow admin to manage categories" ON public.checklist_categories;
CREATE POLICY "Allow authenticated users to read categories" ON public.checklist_categories FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin to manage categories" ON public.checklist_categories FOR ALL TO authenticated USING (public.get_my_role() = 'admin') WITH CHECK (public.get_my_role() = 'admin');

-- 5e. checklist_items
ALTER TABLE public.checklist_items ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow authenticated users to read items" ON public.checklist_items;
DROP POLICY IF EXISTS "Allow admin to manage items" ON public.checklist_items;
CREATE POLICY "Allow authenticated users to read items" ON public.checklist_items FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin to manage items" ON public.checklist_items FOR ALL TO authenticated USING (public.get_my_role() = 'admin') WITH CHECK (public.get_my_role() = 'admin');

-- 5f. profiles
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow admins to read all profiles" ON public.profiles;
DROP POLICY IF EXISTS "Allow users to read their own profile" ON public.profiles;
CREATE POLICY "Allow admins to read all profiles" ON public.profiles FOR SELECT TO authenticated USING (public.get_my_role() = 'admin');
CREATE POLICY "Allow users to read their own profile" ON public.profiles FOR SELECT TO authenticated USING (id = auth.uid());

-- 5g. user_roles
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow admins to read all user_roles" ON public.user_roles;
CREATE POLICY "Allow admins to read all user_roles" ON public.user_roles FOR SELECT TO authenticated USING (public.get_my_role() = 'admin');

-- 5h. reports
ALTER TABLE public.reports ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow authenticated users to insert reports" ON public.reports;
DROP POLICY IF EXISTS "Allow admins to read all reports" ON public.reports;
DROP POLICY IF EXISTS "Allow admins to delete all reports" ON public.reports;
DROP POLICY IF EXISTS "Allow inspectors to read their own reports" ON public.reports;
DROP POLICY IF EXISTS "Allow inspectors to delete their own reports" ON public.reports;

CREATE POLICY "Allow authenticated users to insert reports" ON public.reports FOR INSERT TO authenticated WITH CHECK ( user_id = auth.uid() );
CREATE POLICY "Allow admins to read all reports" ON public.reports FOR SELECT TO authenticated USING ( public.get_my_role() = 'admin' );
CREATE POLICY "Allow admins to delete all reports" ON public.reports FOR DELETE TO authenticated USING ( public.get_my_role() = 'admin' );
CREATE POLICY "Allow inspectors to read their own reports" ON public.reports FOR SELECT TO authenticated USING ( user_id = auth.uid() );
CREATE POLICY "Allow inspectors to delete their own reports" ON public.reports FOR DELETE TO authenticated USING ( user_id = auth.uid() );

-- 5i. key_returns
ALTER TABLE public.key_returns ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow authenticated users to insert key_returns" ON public.key_returns;
DROP POLICY IF EXISTS "Allow admins to read all key_returns" ON public.key_returns;
DROP POLICY IF EXISTS "Allow inspectors to read their own key_returns" ON public.key_returns;

CREATE POLICY "Allow authenticated users to insert key_returns" ON public.key_returns FOR INSERT TO authenticated WITH CHECK ( user_id = auth.uid() );
CREATE POLICY "Allow admins to read all key_returns" ON public.key_returns FOR SELECT TO authenticated USING ( public.get_my_role() = 'admin' );
CREATE POLICY "Allow inspectors to read their own key_returns" ON public.key_returns FOR SELECT TO authenticated USING ( user_id = auth.uid() );

-- 5j. student_allocations (NEW RLS)
ALTER TABLE public.student_allocations ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow all authenticated users to read student allocations" ON public.student_allocations;
CREATE POLICY "Allow all authenticated users to read student allocations" ON public.student_allocations FOR SELECT TO authenticated USING ( true );
DROP POLICY IF EXISTS "Allow admins to manage student allocations" ON public.student_allocations;
CREATE POLICY "Allow admins to manage student allocations" ON public.student_allocations FOR ALL TO authenticated USING ( public.get_my_role() = 'admin' ) WITH CHECK ( public.get_my_role() = 'admin' );

-- 5k. roles (RLS for RBAC management)
ALTER TABLE public.roles ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow authenticated users to read all roles" ON public.roles;
CREATE POLICY "Allow authenticated users to read all roles" ON public.roles FOR SELECT TO authenticated USING (true); 
DROP POLICY IF EXISTS "Allow admins to manage roles" ON public.roles;
CREATE POLICY "Allow admins to manage roles" ON public.roles FOR ALL TO authenticated USING (public.get_my_role() = 'admin') WITH CHECK (public.get_my_role() = 'admin');

-- 5l. permissions (RLS for RBAC management)
ALTER TABLE public.permissions ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow authenticated users to read permissions" ON public.permissions;
CREATE POLICY "Allow authenticated users to read permissions" ON public.permissions FOR SELECT TO authenticated USING (true);
DROP POLICY IF EXISTS "Allow admins to manage permissions" ON public.permissions;
CREATE POLICY "Allow admins to manage permissions" ON public.permissions FOR ALL TO authenticated USING (public.get_my_role() = 'admin') WITH CHECK (public.get_my_role() = 'admin');

-- 5m. role_permissions (RLS for RBAC management)
ALTER TABLE public.role_permissions ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow authenticated users to read role_permissions" ON public.role_permissions;
CREATE POLICY "Allow authenticated users to read role_permissions" ON public.role_permissions FOR SELECT TO authenticated USING (true);
DROP POLICY IF EXISTS "Allow admins to manage role_permissions" ON public.role_permissions;
CREATE POLICY "Allow admins to manage role_permissions" ON public.role_permissions FOR ALL TO authenticated USING (public.get_my_role() = 'admin') WITH CHECK (public.get_my_role() = 'admin');


-- --- 第 6 部分：範例資料 (Sample Data) ---
--
-- ----------------------------------------------------------------

-- 1. 插入基礎角色 (RBAC)
INSERT INTO public.roles (name, description) VALUES 
('admin', '擁有所有管理權限'), 
('inspector', '僅進行檢查與報告'),
('superadmin', '超級管理員 (保留給特殊用戶，擁有所有權限)'),
('sdc', '宿委會 (中等管理權限)'), 
('sdsc', '宿服 (僅供查看權限)')
ON CONFLICT (name) DO NOTHING;

-- 2. 插入所有權限 (RBAC)
INSERT INTO public.permissions (name, description) VALUES
('read_all_reports', '讀取所有檢查報告'),
('manage_zones', '管理宿舍區域'),
('manage_rooms', '管理宿舍房間'),
('manage_types', '管理檢查類型'),
('manage_checklist', '管理檢查項目'),
('manage_allocations', '匯入學生床位分配資料'),
('manage_users', '管理所有使用者帳號與角色'),
('manage_permissions', '管理所有角色權限分配')
ON CONFLICT (name) DO NOTHING;

-- 3. 分配權限 (RBAC)
DO $$
DECLARE
    role_admin_id uuid := (SELECT id FROM public.roles WHERE name = 'admin');
    role_inspector_id uuid := (SELECT id FROM public.roles WHERE name = 'inspector');
    role_superadmin_id uuid := (SELECT id FROM public.roles WHERE name = 'superadmin');
    role_sdc_id uuid := (SELECT id FROM public.roles WHERE name = 'sdc');
    role_sdsc_id uuid := (SELECT id FROM public.roles WHERE name = 'sdsc');
BEGIN
    -- 刪除所有舊的權限指派
    DELETE FROM public.role_permissions WHERE role_id IN (role_admin_id, role_inspector_id, role_superadmin_id, role_sdc_id, role_sdsc_id);

    -- 分配權限給 superadmin (所有權限)
    INSERT INTO public.role_permissions (role_id, permission_id)
    SELECT role_superadmin_id, id FROM public.permissions
    ON CONFLICT (role_id, permission_id) DO NOTHING;

    -- 分配權限給 admin (所有權限)
    INSERT INTO public.role_permissions (role_id, permission_id)
    SELECT role_admin_id, id FROM public.permissions
    ON CONFLICT (role_id, permission_id) DO NOTHING;

    -- 分配權限給 inspector (範例：只讀取報告)
    INSERT INTO public.role_permissions (role_id, permission_id)
    SELECT role_inspector_id, id FROM public.permissions WHERE name IN ('read_all_reports')
    ON CONFLICT (role_id, permission_id) DO NOTHING;
    
    -- 分配權限給 SDC (中等管理權限 - 示範)
    INSERT INTO public.role_permissions (role_id, permission_id)
    SELECT role_sdc_id, id FROM public.permissions WHERE name IN ('read_all_reports', 'manage_zones', 'manage_rooms', 'manage_checklist', 'manage_allocations')
    ON CONFLICT (role_id, permission_id) DO NOTHING;

    -- 分配權限給 SDSC (最低查看權限 - 示範)
    INSERT INTO public.role_permissions (role_id, permission_id)
    SELECT role_sdsc_id, id FROM public.permissions WHERE name IN ('read_all_reports')
    ON CONFLICT (role_id, permission_id) DO NOTHING;

END $$;
-- 結束 RBAC 數據填充

-- 4. 插入基礎數據
INSERT INTO public.check_types (name, description)
VALUES
    ('學期初檢查', '檢查學生入住前的房間狀況'),
    ('期中安全檢查', '例行性的安全與衛生抽查'),
    ('寒假離宿檢查', '確認學生寒假離宿時的清空狀況')
ON CONFLICT (name) DO NOTHING;

INSERT INTO public.dorm_zones (name, description)
VALUES
    ('A 區 (男生宿舍)', 'A 區位於東側，靠近籃球場'),
    ('B 區 (女生宿舍)', 'B 區位於西側，靠近餐廳')
ON CONFLICT (name) DO NOTHING;

INSERT INTO public.rooms (zone_id, room_number)
SELECT id, room_list.room_number
FROM public.dorm_zones, (VALUES ('101'), ('102'), ('201'), ('202')) AS room_list(room_number)
ON CONFLICT (zone_id, room_number) DO NOTHING;

-- 範例床位分配 (用於測試 KeyReturn.vue 的查找功能)
INSERT INTO public.student_allocations (student_id, zone_id, room_id, bed_number)
SELECT 
    'A111001', 
    dz.id, 
    r.id, 
    '1'
FROM 
    public.dorm_zones dz, 
    public.rooms r
WHERE 
    dz.name = 'A 區 (男生宿舍)' AND r.room_number = '101' AND r.zone_id = dz.id
ON CONFLICT (student_id) DO NOTHING;


INSERT INTO public.checklist_categories (name, icon, display_order)
VALUES
    ('寢室區域', '🛏️', 1),
    ('衛浴區域', '🛁', 2),
    ('公共區域/陽台', '🪴', 3)
ON CONFLICT (name) DO NOTHING;

INSERT INTO public.checklist_items (category_id, name, display_order)
VALUES
    ((SELECT id FROM public.checklist_categories WHERE name = '寢室區域'), '床架 (含床板)', 1),
    ((SELECT id FROM public.checklist_categories WHERE name = '寢室區域'), '書桌', 2),
    ((SELECT id FROM public.checklist_categories WHERE name = '寢室區域'), '椅子', 3),
    ((SELECT id FROM public.checklist_categories WHERE name = '寢室區域'), '衣櫃', 4),
    ((SELECT id FROM public.checklist_categories WHERE name = '寢室區域'), '冷氣 (含遙控器)', 5),

    ((SELECT id FROM public.checklist_categories WHERE name = '衛浴區域'), '馬桶 (含水箱)', 1),
    ((SELECT id FROM public.checklist_categories WHERE name = '衛浴區域'), '洗手台 (含水龍頭)', 2),
    ((SELECT id FROM public.checklist_categories WHERE name = '衛浴區域'), '淋浴設備 (含蓮蓬頭)', 3),
    ((SELECT id FROM public.checklist_categories WHERE name = '衛浴區域'), '置物架', 4),

    ((SELECT id FROM public.checklist_categories WHERE name = '公共區域/陽台'), '地板清潔', 1),
    ((SELECT id FROM public.checklist_categories WHERE name = '公共區域/陽台'), '陽台窗戶', 2)
ON CONFLICT (category_id, name) DO NOTHING;


-- ----------------------------------------------------------------
-- --- 腳本執行完畢 ---
-- ----------------------------------------------------------------