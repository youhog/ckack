-- --- 宿舍檢查系統 - 完整 Supabase SQL 腳本 ---
--
-- 此腳本將建立所有必要的資料表、函數、儲存體和 RLS 權限策略，
-- 以完整支援您提供的 Vue.js 應用程式。
--
-- ----------------------------------------------------------------

-- --- 第 1 部分：建立資料表 ---
-- 建立所有應用程式需要的資料表。
-- ----------------------------------------------------------------

-- 1. 宿舍區域 (for ManageZones.vue)
CREATE TABLE public.dorm_zones (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    description text,
    CONSTRAINT dorm_zones_pkey PRIMARY KEY (id),
    CONSTRAINT dorm_zones_name_key UNIQUE (name)
);
COMMENT ON TABLE public.dorm_zones IS '宿舍區域 (例如: F 區, A 區)';

-- 2. 房間 (for ManageRooms.vue)
CREATE TABLE public.rooms (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    zone_id uuid NOT NULL,
    room_number text NOT NULL,
    CONSTRAINT rooms_pkey PRIMARY KEY (id),
    CONSTRAINT rooms_zone_id_room_number_key UNIQUE (zone_id, room_number)
);
COMMENT ON TABLE public.rooms IS '宿舍房間號碼，隸屬於某個區域';

-- 3. 檢查類型 (for ManageTypes.vue)
CREATE TABLE public.check_types (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    description text,
    CONSTRAINT check_types_pkey PRIMARY KEY (id),
    CONSTRAINT check_types_name_key UNIQUE (name)
);
COMMENT ON TABLE public.check_types IS '檢查的類型 (例如: 寒假檢查, 學期初檢查)';

-- 4. 檢查項目分類 (for ManageChecklist.vue)
CREATE TABLE public.checklist_categories (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    icon text DEFAULT '📋'::text,
    display_order integer DEFAULT 0,
    CONSTRAINT checklist_categories_pkey PRIMARY KEY (id),
    CONSTRAINT checklist_categories_name_key UNIQUE (name)
);
COMMENT ON TABLE public.checklist_categories IS '檢查項目的分類 (例如: 寢具區域, 衛浴區域)';

-- 5. 檢查項目 (for ManageChecklist.vue)
CREATE TABLE public.checklist_items (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    category_id uuid NOT NULL,
    name text NOT NULL,
    display_order integer DEFAULT 0,
    CONSTRAINT checklist_items_pkey PRIMARY KEY (id),
    CONSTRAINT checklist_items_category_id_name_key UNIQUE (category_id, name)
);
COMMENT ON TABLE public.checklist_items IS '隸屬於某個分類的具體檢查項目 (例如: 床架, 衣櫃)';

-- 6. 使用者公開資料 (for ManageUsers.vue & auth)
-- 此表將由 trigger 自動填充
CREATE TABLE public.profiles (
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    email text,
    CONSTRAINT profiles_pkey PRIMARY KEY (id),
    CONSTRAINT profiles_email_key UNIQUE (email)
);
COMMENT ON TABLE public.profiles IS '儲存使用者的公開資料，與 auth.users 連動';

-- 7. 使用者角色 (for ManageUsers.vue & auth)
-- 此表將由 trigger 自動填充
CREATE TABLE public.user_roles (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_id uuid NOT NULL,
    role text NOT NULL,
    CONSTRAINT user_roles_pkey PRIMARY KEY (id),
    CONSTRAINT user_roles_user_id_key UNIQUE (user_id)
);
COMMENT ON TABLE public.user_roles IS '儲存使用者的角色 (admin 或 inspector)';

-- 8. 檢查報告 (for Inspection.vue & AdminDashboard.vue)
CREATE TABLE public.reports (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_id uuid,
    zone_id uuid,
    room_id uuid,
    check_type_id uuid,
    inspector_name text,
    additional_notes text,
    good_count integer DEFAULT 0,
    damaged_count integer DEFAULT 0,
    missing_count integer DEFAULT 0,
    check_data jsonb,
    notes_data jsonb,
    photo_data jsonb,
    report_content_html text,
    CONSTRAINT reports_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE public.reports IS '儲存所有提交的檢查報告';


-- --- 第 2 部分：建立外鍵 (Foreign Key) 關聯 ---
-- 確保資料的完整性與關聯性。
-- ----------------------------------------------------------------

-- 1. `profiles` 連結到 `auth.users`
ALTER TABLE public.profiles
ADD CONSTRAINT profiles_id_fkey
FOREIGN KEY (id)
REFERENCES auth.users (id)
ON DELETE CASCADE;

-- 2. `user_roles` 連結到 `auth.users`
ALTER TABLE public.user_roles
ADD CONSTRAINT user_roles_user_id_fkey
FOREIGN KEY (user_id)
REFERENCES auth.users (id)
ON DELETE CASCADE;

-- 3. `rooms` 連結到 `dorm_zones`
-- (刪除區域時，底下的房間也一併刪除)
ALTER TABLE public.rooms
ADD CONSTRAINT rooms_zone_id_fkey
FOREIGN KEY (zone_id)
REFERENCES public.dorm_zones (id)
ON DELETE CASCADE;

-- 4. `checklist_items` 連結到 `checklist_categories`
-- (刪除分類時，底下的項目也一併刪除)
ALTER TABLE public.checklist_items
ADD CONSTRAINT checklist_items_category_id_fkey
FOREIGN KEY (category_id)
REFERENCES public.checklist_categories (id)
ON DELETE CASCADE;

-- 5. `reports` 連結到其他表格
-- (如果來源被刪除，報告中的連結設為 NULL，但報告保留)

-- 連結到 `profiles` (修復 400 錯誤的關鍵)
ALTER TABLE public.reports
ADD CONSTRAINT reports_user_id_fkey
FOREIGN KEY (user_id)
REFERENCES public.profiles (id)
ON DELETE SET NULL;

-- 連結到 `dorm_zones`
ALTER TABLE public.reports
ADD CONSTRAINT reports_zone_id_fkey
FOREIGN KEY (zone_id)
REFERENCES public.dorm_zones (id)
ON DELETE SET NULL;

-- 連結到 `rooms`
ALTER TABLE public.reports
ADD CONSTRAINT reports_room_id_fkey
FOREIGN KEY (room_id)
REFERENCES public.rooms (id)
ON DELETE SET NULL;

-- 連結到 `check_types`
ALTER TABLE public.reports
ADD CONSTRAINT reports_check_type_id_fkey
FOREIGN KEY (check_type_id)
REFERENCES public.check_types (id)
ON DELETE SET NULL;


-- --- 第 3 部分：資料庫函數 (RPC) 與觸發器 (Triggers) ---
-- 自動化處理使用者角色和資料。
-- ----------------------------------------------------------------

-- 1. 函數：獲取目前使用者的角色
-- (被 RLS 策略和 main.js 廣泛使用)
CREATE OR REPLACE FUNCTION public.get_my_role()
RETURNS text
LANGUAGE sql
SECURITY DEFINER
AS $$
    SELECT role
    FROM public.user_roles
    WHERE user_id = auth.uid();
$$;

-- 2. 函數：處理新使用者註冊 (for Login.vue)
-- (自動在 profiles 和 user_roles 中建立紀錄)
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    -- 1. 在 profiles 建立紀錄
    INSERT INTO public.profiles (id, email)
    VALUES (NEW.id, NEW.email);
    
    -- 2. 在 user_roles 建立紀錄，預設為 'inspector'
    INSERT INTO public.user_roles (user_id, role)
    VALUES (NEW.id, 'inspector');
    
    RETURN NEW;
END;
$$;

-- 3. 觸發器：當 auth.users 有新使用者時，執行 handle_new_user
CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW
EXECUTE FUNCTION public.handle_new_user();


-- 4. 函數：更新使用者角色 (for ManageUsers.vue)
-- (允許 admin 更改其他人的角色)
CREATE OR REPLACE FUNCTION public.update_user_role(target_user_id uuid, new_role text)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    -- 檢查執行者是否為 'admin'
    IF public.get_my_role() != 'admin' THEN
        RAISE EXCEPTION '權限不足：只有 admin 可以更改使用者角色';
    END IF;
    
    -- 檢查是否試圖更改自己的角色 (Vue 中已有防護，但後端再加一層)
    IF target_user_id = auth.uid() THEN
        RAISE EXCEPTION '無法更改自己的角色';
    END IF;

    -- 更新或插入角色
    INSERT INTO public.user_roles (user_id, role)
    VALUES (target_user_id, new_role)
    ON CONFLICT (user_id)
    DO UPDATE SET role = new_role;
END;
$$;


-- --- 第 4 部分：儲存體 (Storage) ---
-- 建立 'photos' 儲存桶 (for PhotoUploader.vue)
-- ----------------------------------------------------------------

-- 建立一個名為 'photos' 的公開儲存桶
INSERT INTO storage.buckets (id, name, public)
VALUES ('photos', 'photos', true)
ON CONFLICT (id) DO NOTHING;

-- RLS：允許已登入使用者上傳照片
CREATE POLICY "Allow authenticated users to upload photos"
ON storage.objects FOR INSERT TO authenticated
WITH CHECK ( bucket_id = 'photos' );

-- RLS：允許所有人讀取照片 (因為是 public bucket)
-- (Supabase 通常會自動建立，但為保險起見)
CREATE POLICY "Allow public read access to photos"
ON storage.objects FOR SELECT
USING ( bucket_id = 'photos' );


-- --- 第 5 部分：資料列層級安全性 (RLS) 策略 ---
-- 
-- 這是修復「資料為空」問題的關鍵。
-- 
-- ----------------------------------------------------------------

-- --- 5a. 設定檔表格 (所有人可讀，僅 Admin 可寫) ---

-- dorm_zones
ALTER TABLE public.dorm_zones ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow authenticated users to read zones" ON public.dorm_zones;
DROP POLICY IF EXISTS "Allow admin to manage zones" ON public.dorm_zones;
CREATE POLICY "Allow authenticated users to read zones" ON public.dorm_zones FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin to manage zones" ON public.dorm_zones FOR ALL TO authenticated USING (public.get_my_role() = 'admin') WITH CHECK (public.get_my_role() = 'admin');

-- rooms
ALTER TABLE public.rooms ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow authenticated users to read rooms" ON public.rooms;
DROP POLICY IF EXISTS "Allow admin to manage rooms" ON public.rooms;
CREATE POLICY "Allow authenticated users to read rooms" ON public.rooms FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin to manage rooms" ON public.rooms FOR ALL TO authenticated USING (public.get_my_role() = 'admin') WITH CHECK (public.get_my_role() = 'admin');

-- check_types
ALTER TABLE public.check_types ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow authenticated users to read check_types" ON public.check_types;
DROP POLICY IF EXISTS "Allow admin to manage check_types" ON public.check_types;
CREATE POLICY "Allow authenticated users to read check_types" ON public.check_types FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin to manage check_types" ON public.check_types FOR ALL TO authenticated USING (public.get_my_role() = 'admin') WITH CHECK (public.get_my_role() = 'admin');

-- checklist_categories
ALTER TABLE public.checklist_categories ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow authenticated users to read categories" ON public.checklist_categories;
DROP POLICY IF EXISTS "Allow admin to manage categories" ON public.checklist_categories;
CREATE POLICY "Allow authenticated users to read categories" ON public.checklist_categories FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin to manage categories" ON public.checklist_categories FOR ALL TO authenticated USING (public.get_my_role() = 'admin') WITH CHECK (public.get_my_role() = 'admin');

-- checklist_items
ALTER TABLE public.checklist_items ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow authenticated users to read items" ON public.checklist_items;
DROP POLICY IF EXISTS "Allow admin to manage items" ON public.checklist_items;
CREATE POLICY "Allow authenticated users to read items" ON public.checklist_items FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin to manage items" ON public.checklist_items FOR ALL TO authenticated USING (public.get_my_role() = 'admin') WITH CHECK (public.get_my_role() = 'admin');

-- --- 5b. 使用者資料 (僅 Admin 可讀/寫，使用者可讀自己) ---

-- profiles
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow admins to read all profiles" ON public.profiles;
DROP POLICY IF EXISTS "Allow users to read their own profile" ON public.profiles;
CREATE POLICY "Allow admins to read all profiles" ON public.profiles FOR SELECT TO authenticated USING (public.get_my_role() = 'admin');
CREATE POLICY "Allow users to read their own profile" ON public.profiles FOR SELECT TO authenticated USING (id = auth.uid());

-- user_roles
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow admins to read all user_roles" ON public.user_roles;
CREATE POLICY "Allow admins to read all user_roles" ON public.user_roles FOR SELECT TO authenticated USING (public.get_my_role() = 'admin');
-- (注意: 寫入權限是透過 `update_user_role` 函數繞過的)

-- --- 5c. 報告資料 (所有人可新增，Admin 可讀/刪全部，Inspector 可讀/刪自己) ---

-- reports
ALTER TABLE public.reports ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow authenticated users to insert reports" ON public.reports;
DROP POLICY IF EXISTS "Allow admins to read/delete all reports" ON public.reports;
DROP POLICY IF EXISTS "Allow inspectors to read/delete their own reports" ON public.reports;

-- 1. 允許所有登入者新增報告
CREATE POLICY "Allow authenticated users to insert reports"
ON public.reports FOR INSERT TO authenticated
WITH CHECK ( user_id = auth.uid() );

-- 2. 允許 Admin 讀取和刪除所有報告
CREATE POLICY "Allow admins to read/delete all reports"
ON public.reports FOR SELECT USING ( public.get_my_role() = 'admin' );
CREATE POLICY "Allow admins to delete all reports"
ON public.reports FOR DELETE USING ( public.get_my_role() = 'admin' );

-- 3. 允許 Inspector 讀取和刪除自己的報告
CREATE POLICY "Allow inspectors to read/delete their own reports"
ON public.reports FOR SELECT USING ( user_id = auth.uid() );
CREATE POLICY "Allow inspectors to delete their own reports"
ON public.reports FOR DELETE USING ( user_id = auth.uid() );

-- ----------------------------------------------------------------
-- --- 腳本執行完畢 ---
-- ----------------------------------------------------------------