-- --- ÂÆøËàçÊ™¢Êü•Á≥ªÁµ± - ÂÆåÊï¥Âà™Èô§ËàáÈáçÂª∫ SQL ËÖ≥Êú¨ (v12.5 - ÁÑ° LOG) ---

-- ****** Ë≠¶ÂëäÔºö‰ª•‰∏ãÊåá‰ª§Â∞áÂæπÂ∫ïÂà™Èô§ÊâÄÊúâÁõ∏ÈóúË°®Ê†ºÂíåË≥áÊñôÔºÅ ******
-- ****** Ë´ãÂú®Âü∑Ë°åÂâçÂãôÂøÖÂÇô‰ªΩÊÇ®ÁöÑË≥áÊñôÂ∫´ÔºÅ ******
--
-- ----------------------------------------------------------------

-- --- Á¨¨ -1 ÈÉ®ÂàÜÔºöÂÆåÊï¥Âà™Èô§ËàäÊúâÁµêÊßã ---
DROP FUNCTION IF EXISTS public.get_my_role() CASCADE;
DROP FUNCTION IF EXISTS public.update_user_role(uuid, text) CASCADE;
DROP FUNCTION IF EXISTS public.handle_new_user() CASCADE;
DROP FUNCTION IF EXISTS public.setup_permissions() CASCADE;
DROP FUNCTION IF EXISTS public.import_existing_users() CASCADE;

DROP TABLE IF EXISTS public.role_permissions CASCADE;
DROP TABLE IF EXISTS public.student_allocations CASCADE;
DROP TABLE IF EXISTS public.key_returns CASCADE;
DROP TABLE IF EXISTS public.reports CASCADE;
DROP TABLE IF EXISTS public.user_roles CASCADE;
DROP TABLE IF EXISTS public.profiles CASCADE;
DROP TABLE IF EXISTS public.checklist_items CASCADE;
DROP TABLE IF EXISTS public.checklist_categories CASCADE;
DROP TABLE IF EXISTS public.check_types CASCADE;
DROP TABLE IF EXISTS public.rooms CASCADE;
DROP TABLE IF EXISTS public.dorm_zones CASCADE;
DROP TABLE IF EXISTS public.permissions CASCADE;
DROP TABLE IF EXISTS public.roles CASCADE;

-- --- Á¨¨ 0 ÈÉ®ÂàÜÔºöÈ†êÂÖàÂà™Èô§ÂèØËÉΩË°ùÁ™ÅÁöÑÂáΩÊï∏ (ÂÜçÊ¨°Á¢∫‰øù) ---
DROP FUNCTION IF EXISTS public.get_my_role() CASCADE;
DROP FUNCTION IF EXISTS public.update_user_role(uuid, text) CASCADE;
DROP FUNCTION IF EXISTS public.handle_new_user() CASCADE;
DROP FUNCTION IF EXISTS public.setup_permissions() CASCADE;
DROP FUNCTION IF EXISTS public.import_existing_users() CASCADE;

-- --- Á¨¨ 1 ÈÉ®ÂàÜÔºöÂª∫Á´ãË≥áÊñôË°® ---
--
-- ----------------------------------------------------------------

-- RBAC Âü∫Á§éÁµêÊßã
CREATE TABLE public.roles (id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY, name text NOT NULL UNIQUE, description text NULL);
CREATE TABLE public.permissions (id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY, name text NOT NULL UNIQUE, description text NULL);
CREATE TABLE public.role_permissions (role_id uuid NOT NULL, permission_id uuid NOT NULL, PRIMARY KEY (role_id, permission_id));
-- ÊáâÁî®Á®ãÂºèË°®Ê†º
CREATE TABLE public.dorm_zones (id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY, created_at timestamp with time zone DEFAULT now() NOT NULL, name text NOT NULL UNIQUE, description text);
CREATE TABLE public.rooms (id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY, created_at timestamp with time zone DEFAULT now() NOT NULL, zone_id uuid NOT NULL, household text NULL, floor text NOT NULL, room_number text NOT NULL, capacity integer DEFAULT 4 NOT NULL, CONSTRAINT rooms_zone_floor_number_key UNIQUE (zone_id, floor, room_number), CONSTRAINT rooms_capacity_check CHECK ((capacity > 0)));
CREATE TABLE public.check_types (id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY, created_at timestamp with time zone DEFAULT now() NOT NULL, name text NOT NULL UNIQUE, description text);
CREATE TABLE public.checklist_categories (id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY, created_at timestamp with time zone DEFAULT now() NOT NULL, name text NOT NULL UNIQUE, icon text DEFAULT 'üìã'::text, display_order integer DEFAULT 0);
CREATE TABLE public.checklist_items (id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY, created_at timestamp with time zone DEFAULT now() NOT NULL, category_id uuid NOT NULL, name text NOT NULL, display_order integer DEFAULT 0, CONSTRAINT checklist_items_category_id_name_key UNIQUE (category_id, name));
CREATE TABLE public.profiles (id uuid NOT NULL PRIMARY KEY, created_at timestamp with time zone DEFAULT now() NOT NULL, email text UNIQUE);
CREATE TABLE public.user_roles (id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY, created_at timestamp with time zone DEFAULT now() NOT NULL, user_id uuid NOT NULL UNIQUE, role text NOT NULL);
CREATE TABLE public.reports (id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY, created_at timestamp with time zone DEFAULT now() NOT NULL, user_id uuid, zone_id uuid, room_id uuid, check_type_id uuid, inspector_name text, additional_notes text, good_count integer DEFAULT 0, damaged_count integer DEFAULT 0, missing_count integer DEFAULT 0, check_data jsonb, notes_data jsonb, photo_data jsonb, report_content_html text);
CREATE TABLE public.key_returns (id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY, created_at timestamp with time zone DEFAULT now() NOT NULL, user_id uuid, zone_id uuid NOT NULL, room_id uuid NOT NULL, student_id text, bed_number text, return_notes text, is_returned boolean DEFAULT true NOT NULL);
CREATE TABLE public.student_allocations (id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY, created_at timestamp with time zone DEFAULT now() NOT NULL, student_id text NOT NULL UNIQUE, zone_id uuid NOT NULL, room_id uuid NOT NULL, bed_number text NOT NULL, CONSTRAINT student_allocations_room_bed_key UNIQUE (room_id, bed_number));

-- --- Á¨¨ 2 ÈÉ®ÂàÜÔºöÂª∫Á´ãÂ§ñÈçµÈóúËÅØ ---
--
-- ----------------------------------------------------------------
ALTER TABLE public.role_permissions ADD CONSTRAINT role_permissions_role_id_fkey FOREIGN KEY (role_id) REFERENCES public.roles (id) ON DELETE CASCADE;
ALTER TABLE public.role_permissions ADD CONSTRAINT role_permissions_permission_id_fkey FOREIGN KEY (permission_id) REFERENCES public.permissions (id) ON DELETE CASCADE;
ALTER TABLE public.user_roles ADD CONSTRAINT user_roles_role_fkey FOREIGN KEY (role) REFERENCES public.roles (name) ON DELETE RESTRICT;
ALTER TABLE public.profiles ADD CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users (id) ON DELETE CASCADE;
ALTER TABLE public.user_roles ADD CONSTRAINT user_roles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id) ON DELETE CASCADE;
ALTER TABLE public.rooms ADD CONSTRAINT rooms_zone_id_fkey FOREIGN KEY (zone_id) REFERENCES public.dorm_zones (id) ON DELETE CASCADE;
ALTER TABLE public.checklist_items ADD CONSTRAINT checklist_items_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.checklist_categories (id) ON DELETE CASCADE;
ALTER TABLE public.reports ADD CONSTRAINT reports_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id) ON DELETE SET NULL;
ALTER TABLE public.reports ADD CONSTRAINT reports_zone_id_fkey FOREIGN KEY (zone_id) REFERENCES public.dorm_zones (id) ON DELETE SET NULL;
ALTER TABLE public.reports ADD CONSTRAINT reports_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.rooms (id) ON DELETE SET NULL;
ALTER TABLE public.reports ADD CONSTRAINT reports_check_type_id_fkey FOREIGN KEY (check_type_id) REFERENCES public.check_types (id) ON DELETE SET NULL;
ALTER TABLE public.key_returns ADD CONSTRAINT key_returns_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id) ON DELETE SET NULL;
ALTER TABLE public.key_returns ADD CONSTRAINT key_returns_zone_id_fkey FOREIGN KEY (zone_id) REFERENCES public.dorm_zones (id) ON DELETE CASCADE;
ALTER TABLE public.key_returns ADD CONSTRAINT key_returns_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.rooms (id) ON DELETE CASCADE;
ALTER TABLE public.student_allocations ADD CONSTRAINT student_allocations_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.rooms (id) ON DELETE CASCADE;
ALTER TABLE public.student_allocations ADD CONSTRAINT student_allocations_zone_id_fkey FOREIGN KEY (zone_id) REFERENCES public.dorm_zones (id) ON DELETE CASCADE;

-- --- Á¨¨ 3 ÈÉ®ÂàÜÔºöË≥áÊñôÂ∫´ÂáΩÊï∏ËàáËß∏ÁôºÂô® ---
--
-- ----------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.get_my_role() RETURNS text LANGUAGE sql SECURITY DEFINER STABLE SET search_path = public AS $$ SELECT role FROM public.user_roles WHERE user_id = auth.uid(); $$;
CREATE OR REPLACE FUNCTION public.handle_new_user() RETURNS trigger LANGUAGE plpgsql SECURITY DEFINER SET search_path = public AS $$ BEGIN INSERT INTO public.profiles (id, email, created_at) VALUES (NEW.id, NEW.email, NEW.created_at) ON CONFLICT (id) DO NOTHING; IF EXISTS (SELECT 1 FROM public.roles WHERE name = 'inspector') THEN INSERT INTO public.user_roles (user_id, role) VALUES (NEW.id, 'inspector') ON CONFLICT (user_id) DO NOTHING; ELSE RAISE WARNING 'Default role "inspector" not found for new user %', NEW.id; END IF; RETURN NEW; END; $$;
CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
CREATE OR REPLACE FUNCTION public.update_user_role(target_user_id uuid, new_role text) RETURNS void LANGUAGE plpgsql SECURITY DEFINER SET search_path = public AS $$ DECLARE current_user_role text; target_user_current_role text; BEGIN SELECT public.get_my_role() INTO current_user_role; IF current_user_role NOT IN ('admin', 'superadmin') THEN RAISE EXCEPTION 'Ê¨äÈôê‰∏çË∂≥'; END IF; IF NOT EXISTS (SELECT 1 FROM public.roles WHERE name = new_role) THEN RAISE EXCEPTION 'ÁÑ°ÊïàÁöÑËßíËâ≤: %', new_role; END IF; IF target_user_id = auth.uid() THEN RAISE EXCEPTION 'ÁÑ°Ê≥ïÊõ¥ÊîπËá™Â∑±ÁöÑËßíËâ≤'; END IF; SELECT role INTO target_user_current_role FROM public.user_roles WHERE user_id = target_user_id; IF target_user_current_role = 'superadmin' THEN RAISE EXCEPTION 'ÁÑ°Ê≥ïÊõ¥Êîπ superadmin ÁöÑËßíËâ≤'; END IF; INSERT INTO public.user_roles (user_id, role) VALUES (target_user_id, new_role) ON CONFLICT (user_id) DO UPDATE SET role = new_role; END; $$;
CREATE OR REPLACE FUNCTION public.setup_permissions() RETURNS text LANGUAGE plpgsql AS $$ DECLARE role_admin_id uuid; role_inspector_id uuid; role_superadmin_id uuid; role_sdc_id uuid; role_sdsc_id uuid; BEGIN INSERT INTO public.roles (name, description) VALUES ('admin', 'ÁÆ°ÁêÜÂì°'), ('inspector', 'Ê™¢Êü•Âì°'), ('superadmin', 'Ë∂ÖÁ¥öÁÆ°ÁêÜÂì°'), ('sdc', 'ÂÆøÂßîÊúÉ'), ('sdsc', 'ÂÆøÊúç') ON CONFLICT (name) DO NOTHING; SELECT id INTO role_admin_id FROM public.roles WHERE name = 'admin'; SELECT id INTO role_inspector_id FROM public.roles WHERE name = 'inspector'; SELECT id INTO role_superadmin_id FROM public.roles WHERE name = 'superadmin'; SELECT id INTO role_sdc_id FROM public.roles WHERE name = 'sdc'; SELECT id INTO role_sdsc_id FROM public.roles WHERE name = 'sdsc'; IF role_admin_id IS NULL OR role_inspector_id IS NULL OR role_superadmin_id IS NULL OR role_sdc_id IS NULL OR role_sdsc_id IS NULL THEN RAISE EXCEPTION 'Âü∫Á§éËßíËâ≤Êü•Ë©¢Â§±Êïó'; END IF; INSERT INTO public.permissions (name, description) VALUES ('read_all_reports', 'ËÆÄÂèñÂ†±Âëä'), ('manage_zones', 'ÁÆ°ÁêÜÂçÄÂüü'), ('manage_rooms', 'ÁÆ°ÁêÜÊàøÈñì'), ('manage_types', 'ÁÆ°ÁêÜÈ°ûÂûã'), ('manage_checklist', 'ÁÆ°ÁêÜÊ™¢Êü•È†ÖÁõÆ'), ('manage_allocations', 'ÁÆ°ÁêÜÂ∫ä‰ΩçÂàÜÈÖç'), ('manage_users', 'ÁÆ°ÁêÜ‰ΩøÁî®ËÄÖ'), ('manage_permissions', 'ÁÆ°ÁêÜÊ¨äÈôê') ON CONFLICT (name) DO NOTHING; DELETE FROM public.role_permissions WHERE role_id IN (role_admin_id, role_inspector_id, role_superadmin_id, role_sdc_id, role_sdsc_id); INSERT INTO public.role_permissions (role_id, permission_id) SELECT role_superadmin_id, id FROM public.permissions ON CONFLICT DO NOTHING; INSERT INTO public.role_permissions (role_id, permission_id) SELECT role_admin_id, id FROM public.permissions ON CONFLICT DO NOTHING; INSERT INTO public.role_permissions (role_id, permission_id) SELECT role_inspector_id, id FROM public.permissions WHERE name = 'read_all_reports' ON CONFLICT DO NOTHING; INSERT INTO public.role_permissions (role_id, permission_id) SELECT role_sdc_id, id FROM public.permissions WHERE name IN ('read_all_reports', 'manage_zones', 'manage_rooms', 'manage_checklist', 'manage_allocations') ON CONFLICT DO NOTHING; INSERT INTO public.role_permissions (role_id, permission_id) SELECT role_sdsc_id, id FROM public.permissions WHERE name = 'read_all_reports' ON CONFLICT DO NOTHING; RETURN 'Âü∫Á§éËßíËâ≤ÂíåÊ¨äÈôêË®≠ÁΩÆÂÆåÊàê'; END; $$;
CREATE OR REPLACE FUNCTION public.import_existing_users() RETURNS text LANGUAGE plpgsql SECURITY DEFINER SET search_path = public AS $$ DECLARE user_record record; inserted_profiles integer := 0; inserted_roles integer := 0; BEGIN IF NOT EXISTS (SELECT 1 FROM public.roles WHERE name = 'inspector') THEN RAISE WARNING 'È†êË®≠ËßíËâ≤ "inspector" ‰∏çÂ≠òÂú®ÔºåÁÑ°Ê≥ïË®≠ÂÆöÈ†êË®≠ËßíËâ≤„ÄÇ'; RETURN 'ÂåØÂÖ•‰∏≠Ê≠¢ÔºöÈ†êË®≠ËßíËâ≤ "inspector" ‰∏çÂ≠òÂú®„ÄÇ'; END IF; FOR user_record IN SELECT id, email, created_at FROM auth.users LOOP INSERT INTO public.profiles (id, email, created_at) VALUES (user_record.id, user_record.email, user_record.created_at) ON CONFLICT (id) DO NOTHING; IF FOUND THEN inserted_profiles := inserted_profiles + 1; END IF; INSERT INTO public.user_roles (user_id, role) VALUES (user_record.id, 'inspector') ON CONFLICT (user_id) DO NOTHING; IF FOUND THEN inserted_roles := inserted_roles + 1; END IF; END LOOP; RETURN 'Êó¢Êúâ‰ΩøÁî®ËÄÖÂåØÂÖ•ÂÆåÊàê„ÄÇÊñ∞Â¢û profiles: ' || inserted_profiles || ', Êñ∞Â¢û user_roles: ' || inserted_roles; END; $$;

-- --- Á¨¨ 4 ÈÉ®ÂàÜÔºöÂÑ≤Â≠òÈ´î (Storage) ---
-- ****** Ê≠§ÈÉ®ÂàÜÈúÄÈÄèÈÅé Supabase UI ÊâãÂãïË®≠ÂÆö ******
-- ----------------------------------------------------------------

-- --- Á¨¨ 5 ÈÉ®ÂàÜÔºöË≥áÊñôÂàóÂ±§Á¥öÂÆâÂÖ®ÊÄß (RLS) Á≠ñÁï• ---
--
-- ----------------------------------------------------------------
-- ÂïüÁî® RLS
ALTER TABLE public.dorm_zones ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.rooms ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.check_types ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.checklist_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.checklist_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.reports ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.key_returns ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.student_allocations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.permissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.role_permissions ENABLE ROW LEVEL SECURITY;

-- Ê∏ÖÈô§ËàäÁ≠ñÁï•
DROP POLICY IF EXISTS "Allow authenticated read" ON public.dorm_zones;
DROP POLICY IF EXISTS "Allow admin manage" ON public.dorm_zones;
DROP POLICY IF EXISTS "Allow authenticated read" ON public.rooms;
DROP POLICY IF EXISTS "Allow admin manage" ON public.rooms;
DROP POLICY IF EXISTS "Allow authenticated read" ON public.check_types;
DROP POLICY IF EXISTS "Allow admin manage" ON public.check_types;
DROP POLICY IF EXISTS "Allow authenticated read" ON public.checklist_categories;
DROP POLICY IF EXISTS "Allow admin manage" ON public.checklist_categories;
DROP POLICY IF EXISTS "Allow authenticated read" ON public.checklist_items;
DROP POLICY IF EXISTS "Allow admin manage" ON public.checklist_items;
DROP POLICY IF EXISTS "Allow user read own" ON public.profiles;
DROP POLICY IF EXISTS "Allow admin read all" ON public.profiles;
DROP POLICY IF EXISTS "Allow admin read all" ON public.user_roles;
DROP POLICY IF EXISTS "Allow user insert own" ON public.reports;
DROP POLICY IF EXISTS "Allow owner or admin read" ON public.reports;
DROP POLICY IF EXISTS "Allow owner or admin delete" ON public.reports;
DROP POLICY IF EXISTS "Allow admin update" ON public.reports;
DROP POLICY IF EXISTS "Allow user insert own" ON public.key_returns;
DROP POLICY IF EXISTS "Allow owner or admin read" ON public.key_returns;
DROP POLICY IF EXISTS "Allow admin delete" ON public.key_returns;
DROP POLICY IF EXISTS "Allow authenticated read" ON public.student_allocations;
DROP POLICY IF EXISTS "Allow admin manage" ON public.student_allocations;
DROP POLICY IF EXISTS "Allow authenticated read" ON public.roles;
DROP POLICY IF EXISTS "Allow admin manage" ON public.roles;
DROP POLICY IF EXISTS "Allow authenticated read" ON public.permissions;
DROP POLICY IF EXISTS "Allow admin manage" ON public.permissions;
DROP POLICY IF EXISTS "Allow authenticated read" ON public.role_permissions;
DROP POLICY IF EXISTS "Allow admin manage" ON public.role_permissions;

-- ÂâµÂª∫Êñ∞Á≠ñÁï•
CREATE POLICY "Allow authenticated read" ON public.dorm_zones FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin manage" ON public.dorm_zones FOR ALL TO authenticated USING (public.get_my_role() IN ('admin', 'superadmin')) WITH CHECK (public.get_my_role() IN ('admin', 'superadmin'));
CREATE POLICY "Allow authenticated read" ON public.rooms FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin manage" ON public.rooms FOR ALL TO authenticated USING (public.get_my_role() IN ('admin', 'superadmin')) WITH CHECK (public.get_my_role() IN ('admin', 'superadmin'));
CREATE POLICY "Allow authenticated read" ON public.check_types FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin manage" ON public.check_types FOR ALL TO authenticated USING (public.get_my_role() IN ('admin', 'superadmin')) WITH CHECK (public.get_my_role() IN ('admin', 'superadmin'));
CREATE POLICY "Allow authenticated read" ON public.checklist_categories FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin manage" ON public.checklist_categories FOR ALL TO authenticated USING (public.get_my_role() IN ('admin', 'superadmin')) WITH CHECK (public.get_my_role() IN ('admin', 'superadmin'));
CREATE POLICY "Allow authenticated read" ON public.checklist_items FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin manage" ON public.checklist_items FOR ALL TO authenticated USING (public.get_my_role() IN ('admin', 'superadmin')) WITH CHECK (public.get_my_role() IN ('admin', 'superadmin'));
CREATE POLICY "Allow user read own" ON public.profiles FOR SELECT TO authenticated USING (id = auth.uid());
CREATE POLICY "Allow admin read all" ON public.profiles FOR SELECT TO authenticated USING (public.get_my_role() IN ('admin', 'superadmin'));
CREATE POLICY "Allow admin read all" ON public.user_roles FOR SELECT TO authenticated USING (public.get_my_role() IN ('admin', 'superadmin'));
CREATE POLICY "Allow user insert own" ON public.reports FOR INSERT TO authenticated WITH CHECK (user_id = auth.uid());
CREATE POLICY "Allow owner or admin read" ON public.reports FOR SELECT TO authenticated USING (user_id = auth.uid() OR public.get_my_role() IN ('admin', 'superadmin'));
CREATE POLICY "Allow owner or admin delete" ON public.reports FOR DELETE TO authenticated USING (user_id = auth.uid() OR public.get_my_role() IN ('admin', 'superadmin'));
CREATE POLICY "Allow user insert own" ON public.key_returns FOR INSERT TO authenticated WITH CHECK (user_id = auth.uid());
CREATE POLICY "Allow owner or admin read" ON public.key_returns FOR SELECT TO authenticated USING (user_id = auth.uid() OR public.get_my_role() IN ('admin', 'superadmin'));
CREATE POLICY "Allow authenticated read" ON public.student_allocations FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin manage" ON public.student_allocations FOR ALL TO authenticated USING (public.get_my_role() IN ('admin', 'superadmin')) WITH CHECK (public.get_my_role() IN ('admin', 'superadmin'));
CREATE POLICY "Allow authenticated read" ON public.roles FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin manage" ON public.roles FOR ALL TO authenticated USING (public.get_my_role() IN ('admin', 'superadmin')) WITH CHECK (public.get_my_role() IN ('admin', 'superadmin'));
CREATE POLICY "Allow authenticated read" ON public.permissions FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin manage" ON public.permissions FOR ALL TO authenticated USING (public.get_my_role() IN ('admin', 'superadmin')) WITH CHECK (public.get_my_role() IN ('admin', 'superadmin'));
CREATE POLICY "Allow authenticated read" ON public.role_permissions FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow admin manage" ON public.role_permissions FOR ALL TO authenticated USING (public.get_my_role() IN ('admin', 'superadmin')) WITH CHECK (public.get_my_role() IN ('admin', 'superadmin'));

-- --- Á¨¨ 6 ÈÉ®ÂàÜÔºöÁØÑ‰æãË≥áÊñô ---
--
-- ----------------------------------------------------------------
INSERT INTO public.check_types (name, description) VALUES ('Â≠∏ÊúüÂàùÊ™¢Êü•', 'ÂÖ•‰ΩèÂâçÁãÄÊ≥Å'), ('Êúü‰∏≠ÂÆâÂÖ®Ê™¢Êü•', '‰æãË°åÊäΩÊü•'), ('ÂØíÂÅáÈõ¢ÂÆøÊ™¢Êü•', 'Èõ¢ÂÆøÊ∏ÖÁ©∫ÁãÄÊ≥Å') ON CONFLICT (name) DO NOTHING;
INSERT INTO public.dorm_zones (name, description) VALUES ('A ÂçÄ (Áî∑ÁîüÂÆøËàç)', 'Êù±ÂÅ¥'), ('B ÂçÄ (Â•≥ÁîüÂÆøËàç)', 'Ë•øÂÅ¥') ON CONFLICT (name) DO NOTHING;
INSERT INTO public.rooms (zone_id, floor, room_number, capacity) SELECT z.id, r.floor, r.room_number, r.cap FROM public.dorm_zones z, (VALUES ('1', '101', 4), ('1', '102', 4), ('2', '201', 2), ('2', '202', 4)) AS r(floor, room_number, cap) WHERE z.name LIKE 'A ÂçÄ%' ON CONFLICT (zone_id, floor, room_number) DO NOTHING;
INSERT INTO public.rooms (zone_id, household, floor, room_number, capacity) SELECT z.id, r.household, r.floor, r.room_number, r.cap FROM public.dorm_zones z, (VALUES ('H1', '1', '101', 4), ('H1', '1', '102', 2), ('H2', '2', '201', 4), ('H2', '2', '202', 4)) AS r(household, floor, room_number, cap) WHERE z.name LIKE 'B ÂçÄ%' ON CONFLICT (zone_id, floor, room_number) DO NOTHING;
INSERT INTO public.student_allocations (student_id, zone_id, room_id, bed_number) SELECT 'S12345678', dz.id, r.id, '1' FROM public.dorm_zones dz JOIN public.rooms r ON dz.id = r.zone_id WHERE dz.name = 'A ÂçÄ (Áî∑ÁîüÂÆøËàç)' AND r.floor = '1' AND r.room_number = '101' ON CONFLICT (student_id) DO UPDATE SET zone_id=EXCLUDED.zone_id, room_id=EXCLUDED.room_id, bed_number=EXCLUDED.bed_number;
INSERT INTO public.student_allocations (student_id, zone_id, room_id, bed_number) SELECT 'S87654321', dz.id, r.id, '2' FROM public.dorm_zones dz JOIN public.rooms r ON dz.id = r.zone_id WHERE dz.name = 'A ÂçÄ (Áî∑ÁîüÂÆøËàç)' AND r.floor = '1' AND r.room_number = '101' ON CONFLICT (student_id) DO UPDATE SET zone_id=EXCLUDED.zone_id, room_id=EXCLUDED.room_id, bed_number=EXCLUDED.bed_number;
INSERT INTO public.student_allocations (student_id, zone_id, room_id, bed_number) SELECT 'S99988877', dz.id, r.id, '1' FROM public.dorm_zones dz JOIN public.rooms r ON dz.id = r.zone_id WHERE dz.name = 'B ÂçÄ (Â•≥ÁîüÂÆøËàç)' AND r.household = 'H1' AND r.floor = '1' AND r.room_number = '102' ON CONFLICT (student_id) DO UPDATE SET zone_id=EXCLUDED.zone_id, room_id=EXCLUDED.room_id, bed_number=EXCLUDED.bed_number;
INSERT INTO public.student_allocations (student_id, zone_id, room_id, bed_number) SELECT 'S11122233', dz.id, r.id, '2' FROM public.dorm_zones dz JOIN public.rooms r ON dz.id = r.zone_id WHERE dz.name = 'B ÂçÄ (Â•≥ÁîüÂÆøËàç)' AND r.household = 'H1' AND r.floor = '1' AND r.room_number = '102' ON CONFLICT (student_id) DO UPDATE SET zone_id=EXCLUDED.zone_id, room_id=EXCLUDED.room_id, bed_number=EXCLUDED.bed_number;
INSERT INTO public.checklist_categories (name, icon, display_order) VALUES ('ÂØ¢ÂÆ§ÂçÄÂüü', 'üõèÔ∏è', 1), ('Ë°õÊµ¥ÂçÄÂüü', 'üõÅ', 2), ('ÂÖ¨ÂÖ±ÂçÄÂüü/ÈôΩÂè∞', 'ü™¥', 3) ON CONFLICT (name) DO NOTHING;
INSERT INTO public.checklist_items (category_id, name, display_order) SELECT c.id, item.name, item.ord FROM public.checklist_categories c, (VALUES ('ÂØ¢ÂÆ§ÂçÄÂüü', 'Â∫äÊû∂ (Âê´Â∫äÊùø)', 1), ('ÂØ¢ÂÆ§ÂçÄÂüü', 'Êõ∏Ê°å', 2), ('ÂØ¢ÂÆ§ÂçÄÂüü', 'Ê§ÖÂ≠ê', 3), ('ÂØ¢ÂÆ§ÂçÄÂüü', 'Ë°£Ê´É', 4), ('ÂØ¢ÂÆ§ÂçÄÂüü', 'ÂÜ∑Ê∞£ (Âê´ÈÅôÊéßÂô®)', 5), ('Ë°õÊµ¥ÂçÄÂüü', 'È¶¨Ê°∂ (Âê´Ê∞¥ÁÆ±)', 1), ('Ë°õÊµ¥ÂçÄÂüü', 'Ê¥óÊâãÂè∞ (Âê´Ê∞¥ÈæçÈ†≠)', 2), ('Ë°õÊµ¥ÂçÄÂüü', 'Ê∑ãÊµ¥Ë®≠ÂÇô (Âê´ËìÆËì¨È†≠)', 3), ('Ë°õÊµ¥ÂçÄÂüü', 'ÁΩÆÁâ©Êû∂', 4), ('ÂÖ¨ÂÖ±ÂçÄÂüü/ÈôΩÂè∞', 'Âú∞ÊùøÊ∏ÖÊΩî', 1), ('ÂÖ¨ÂÖ±ÂçÄÂüü/ÈôΩÂè∞', 'ÈôΩÂè∞Á™óÊà∂', 2)) AS item(cat_name, name, ord) WHERE c.name = item.cat_name ON CONFLICT (category_id, name) DO NOTHING;

-- --- Á¨¨ 7 ÈÉ®ÂàÜÔºöÂü∑Ë°åÂàùÂßãÂåñÂáΩÊï∏ ---
--
-- ----------------------------------------------------------------
SELECT public.import_existing_users();
SELECT public.setup_permissions();

-- ----------------------------------------------------------------
-- --- ËÖ≥Êú¨Âü∑Ë°åÂÆåÁï¢ ---
-- ----------------------------------------------------------------
-- ÊèêÈÜíÔºöË´ãÂãôÂøÖÂ∑≤ÈÄèÈÅé Supabase UI Âª∫Á´ã photos Bucket ÂèäÂÖ∂Á≠ñÁï•„ÄÇ
-- ----------------------------------------------------------------